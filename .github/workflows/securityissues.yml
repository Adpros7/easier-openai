name: Daily Security Alert Check (with full alert details)

on:
  schedule:
    - cron: '0 1 * * *'     # runs daily at 01:00 UTC (adjust as you like)
  workflow_dispatch:
    inputs:
      manual_details:
        description: "Optional details or JSON payload for manual run"
        required: false
        default: "Triggered manually."

permissions:
  issues: write
  contents: read
  security-events: read

env:
  REPO: ${{ github.repository }}        # owner/repo
  OWNER: ${{ github.repository_owner }}

jobs:
  check_alerts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI & jq
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Login GH CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine source & fetch alert lists
        id: fetch
        run: |
          set -euo pipefail
          rm -f dependabot_alerts.json codescan_alerts.json secretscan_alerts.json issue_body.md

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            EVENT_NAME="manual"
            ISSUE_TITLE="ðŸ”’ Manual Security Alert Trigger"
            # manual_details could be JSON or plain text; put into issue body
            printf '%s\n' "${{ github.event.inputs.manual_details }}" > issue_body.md
          else
            EVENT_NAME="scheduled"
            ISSUE_TITLE="ðŸ”’ Daily Security Alert Summary for ${REPO}"

            # 1) Dependabot alerts list (returns items with `number` that identifies the alert)
            gh api -H "Accept: application/vnd.github+json" \
              /repos/${REPO}/dependabot/alerts?state=open \
              > dependabot_alerts.json || echo "[]" > dependabot_alerts.json

            # 2) Code scanning alerts list (items include a `number`)
            gh api -H "Accept: application/vnd.github+json" \
              /repos/${REPO}/code-scanning/alerts?state=open \
              > codescan_alerts.json || echo "[]" > codescan_alerts.json

            # 3) Secret scanning alerts list (items include an alert number)
            gh api -H "Accept: application/vnd.github+json" \
              /repos/${REPO}/secret-scanning/alerts?state=open \
              > secretscan_alerts.json || echo "[]" > secretscan_alerts.json

            # Start readable markdown body
            {
              echo "## Security summary for ${REPO}"
              echo
              echo "- Dependabot open alerts: $(jq length < dependabot_alerts.json)"
              echo "- Code scanning open alerts: $(jq length < codescan_alerts.json)"
              echo "- Secret scanning open alerts: $(jq length < secretscan_alerts.json)"
              echo
              echo "---"
              echo
            } > issue_body.md

            #
            # For each Dependabot alert: fetch full alert object and append
            #
            if [ "$(jq length < dependabot_alerts.json)" -gt 0 ]; then
              echo "### Dependabot alerts (expanded)" >> issue_body.md
              for n in $(jq -r '.[].number' dependabot_alerts.json); do
                echo "" >> issue_body.md
                echo "#### Dependabot alert #${n}" >> issue_body.md
                echo '_Raw JSON follows:_\n' >> issue_body.md || true
                echo '```json' >> issue_body.md
                # fetch the full alert
                gh api -H "Accept: application/vnd.github+json" /repos/${REPO}/dependabot/alerts/${n} \
                  > dependabot_alert_${n}.json || echo "{}" > dependabot_alert_${n}.json
                jq . dependabot_alert_${n}.json >> issue_body.md
                echo '```' >> issue_body.md
              done
            fi

            #
            # For each Code Scanning alert: fetch full alert object and append
            #
            if [ "$(jq length < codescan_alerts.json)" -gt 0 ]; then
              echo "### Code scanning alerts (expanded)" >> issue_body.md
              for n in $(jq -r '.[].number' codescan_alerts.json); do
                echo "" >> issue_body.md
                echo "#### Code scanning alert #${n}" >> issue_body.md
                echo '_Raw JSON follows:_\n' >> issue_body.md || true
                echo '```json' >> issue_body.md
                gh api -H "Accept: application/vnd.github+json" /repos/${REPO}/code-scanning/alerts/${n} \
                  > codescan_alert_${n}.json || echo "{}" > codescan_alert_${n}.json
                jq . codescan_alert_${n}.json >> issue_body.md
                echo '```' >> issue_body.md
              done
            fi

            #
            # For each Secret Scanning alert: fetch full alert object and append
            #
            if [ "$(jq length < secretscan_alerts.json)" -gt 0 ]; then
              echo "### Secret scanning alerts (expanded)" >> issue_body.md
              for n in $(jq -r '.[].number' secretscan_alerts.json); do
                echo "" >> issue_body.md
                echo "#### Secret scanning alert #${n}" >> issue_body.md
                echo '_Raw JSON follows:_\n' >> issue_body.md || true
                echo '```json' >> issue_body.md
                gh api -H "Accept: application/vnd.github+json" /repos/${REPO}/secret-scanning/alerts/${n} \
                  > secretscan_alert_${n}.json || echo "{}" > secretscan_alert_${n}.json
                jq . secretscan_alert_${n}.json >> issue_body.md
                echo '```' >> issue_body.md
              done
            fi

          fi

          # export for later
          echo "EVENT_NAME=${EVENT_NAME}" >> $GITHUB_ENV
          echo "ISSUE_TITLE=${ISSUE_TITLE}" >> $GITHUB_ENV

      - name: Create GitHub Issue (safe JSON payload)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ env.REPO }}
          EVENT_NAME: ${{ env.EVENT_NAME }}
          ISSUE_TITLE: ${{ env.ISSUE_TITLE }}
        run: |
          set -euo pipefail

          # read constructed markdown body
          BODY_CONTENT="$(cat issue_body.md)"

          # build safe JSON payload with jq (handles escaping/newlines properly)
          jq -n --arg title "$ISSUE_TITLE" --arg body "$BODY_CONTENT" \
            '{title: $title, body: $body}' > payload.json

          echo "Payload preview:"
          jq . payload.json

          # Create the issue
          gh api --method POST repos/${REPO}/issues --input payload.json
